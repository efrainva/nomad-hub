{"ast":null,"code":"import _defineProperty from \"/Users/efrain/Documents/toom/room-team/nomad-hub/room-finder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_LODGE_RE, GET_LODGE_SUCC //  GET_LODGE_FAIL,\n} from '../Actions/lodgeA';\nconst initialState = {\n  name: [],\n  loading: false,\n  err: '',\n  message: ''\n};\nexport const lodge = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_LODGE_RE:\n      return _objectSpread({}, state, {\n        loading: true,\n        message: 'loading'\n      });\n\n    case GET_LODGE_SUCC:\n      return _objectSpread({}, state, {\n        loading: false,\n        name: action.paylaod,\n        err: '',\n        message: 'grabbing'\n      });\n\n    case GET_LODGE_FAIL:\n      return _objectSpread({}, state, {\n        err: action.paylaod,\n        message: 'error did not receive data'\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/efrain/Documents/toom/room-team/nomad-hub/room-finder/src/Reducers/lodgeR.js"],"names":["GET_LODGE_RE","GET_LODGE_SUCC","initialState","name","loading","err","message","lodge","state","action","type","paylaod","GET_LODGE_FAIL"],"mappings":";;;;;;AACA,SACCA,YADD,EAECC,cAFD,CAGA;AAHA,OAIQ,mBAJR;AAMA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,IAAI,EAAE,EADc;AAEpBC,EAAAA,OAAO,EAAC,KAFY;AAGpBC,EAAAA,GAAG,EAAC,EAHgB;AAIpBC,EAAAA,OAAO,EAAC;AAJY,CAArB;AAOA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,YAAL;AACE,+BACKQ,KADL;AAEEJ,QAAAA,OAAO,EAAC,IAFV;AAIEE,QAAAA,OAAO,EAAC;AAJV;;AAMF,SAAKL,cAAL;AACE,+BACKO,KADL;AAEEJ,QAAAA,OAAO,EAAC,KAFV;AAGED,QAAAA,IAAI,EAACM,MAAM,CAACE,OAHd;AAIEN,QAAAA,GAAG,EAAC,EAJN;AAKEC,QAAAA,OAAO,EAAC;AALV;;AAOF,SAAKM,cAAL;AACE,+BACKJ,KADL;AAEEH,QAAAA,GAAG,EAACI,MAAM,CAACE,OAFb;AAGEL,QAAAA,OAAO,EAAC;AAHV;;AAKF;AAAS,aAAOE,KAAP;AAtBX;AAwBD,CAzBM","sourcesContent":["\nimport {\n GET_LODGE_RE,\n GET_LODGE_SUCC,\n//  GET_LODGE_FAIL,\n}  from '../Actions/lodgeA';\n\nconst initialState = {\n name: [],\n loading:false,\n err:'',\n message:''\n};\n\nexport const lodge = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_LODGE_RE:\n      return {\n        ...state,\n        loading:true,\n\n        message:'loading'\n      }\n    case GET_LODGE_SUCC:\n      return {\n        ...state,\n        loading:false,\n        name:action.paylaod,\n        err:'',\n        message:'grabbing'\n      }\n    case GET_LODGE_FAIL:\n      return {\n        ...state,\n        err:action.paylaod,\n        message:'error did not receive data'\n      }\n    default: return state\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}