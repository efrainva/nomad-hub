{"ast":null,"code":"import _defineProperty from \"/Users/efrain/Documents/toom/room-team/nomad-hub/room-finder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_PLACE, GOT_PLACE, FAIL_PLACE } from '../Actions/lodgeA';\nconst initialState = {\n  name: [],\n  isFetching: false,\n  error: null,\n  status: null\n};\nexport const lodge = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_PLACE:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        state: action.stat\n      });\n\n    case FAIL_PLACE:\n      return _objectSpread({}, state, {\n        name: [],\n        err: action.payload\n      });\n\n    case GOT_PLACE:\n      return _objectSpread({}, state, {\n        name: action.payload,\n        isFetching: false // message:'grabbing'\n\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/efrain/Documents/toom/room-team/nomad-hub/room-finder/src/redux/Reducers/lodgeR.js"],"names":["GET_PLACE","GOT_PLACE","FAIL_PLACE","initialState","name","isFetching","error","status","lodge","state","action","type","stat","err","payload"],"mappings":";;;;;;AAAA,SAAUA,SAAV,EACEC,SADF,EAEEC,UAFF,QAEuB,mBAFvB;AAIA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAC,EADc;AAEnBC,EAAAA,UAAU,EAAC,KAFQ;AAGnBC,EAAAA,KAAK,EAAC,IAHa;AAInBC,EAAAA,MAAM,EAAC;AAJY,CAArB;AAOA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,SAAL;AACE,+BACKS,KADL;AAEEJ,QAAAA,UAAU,EAAC,IAFb;AAGEI,QAAAA,KAAK,EAACC,MAAM,CAACE;AAHf;;AAKF,SAAKV,UAAL;AACE,+BACKO,KADL;AAEEL,QAAAA,IAAI,EAAC,EAFP;AAGES,QAAAA,GAAG,EAACH,MAAM,CAACI;AAHb;;AAMF,SAAKb,SAAL;AACE,+BACKQ,KADL;AAEEL,QAAAA,IAAI,EAACM,MAAM,CAACI,OAFd;AAGET,QAAAA,UAAU,EAAC,KAHb,CAIE;;AAJF;;AAMF;AACA,aAAOI,KAAP;AAtBF;AAwBD,CAzBM","sourcesContent":["import {  GET_PLACE ,\n  GOT_PLACE, \n  FAIL_PLACE,  }  from '../Actions/lodgeA';\n\nconst initialState = {\n  name:[],\n  isFetching:false,\n  error:null,\n  status:null,\n};\n\nexport const lodge = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_PLACE:\n      return {\n        ...state,\n        isFetching:true,\n        state:action.stat\n      }\n    case FAIL_PLACE:\n      return {\n        ...state,\n        name:[],\n        err:action.payload,\n\n        }\n    case GOT_PLACE:\n      return {\n        ...state,\n        name:action.payload,\n        isFetching:false,\n        // message:'grabbing'\n      }\n    default: \n    return state;\n  } \n}\n\n"]},"metadata":{},"sourceType":"module"}